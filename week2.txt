#include <stdio.h>

int sumOfN(int n) {
if (n == 0)

return 0;
else
return n + sumOfN(n - 1);
}

int fibonacci(int n) {
if (n == 0)
return 0;
else if (n == 1)
return 1;
else
return fibonacci(n - 1) + fibonacci(n - 2);
}

void towerOfHanoi(int n, char source, char auxiliary, char
destination) {
if (n == 1) {
printf("Move disk 1 from %c to %c\n", source, destination);
return;
}
towerOfHanoi(n - 1, source, destination, auxiliary);
printf("Move disk %d from %c to %c\n", n, source, destination);
towerOfHanoi(n - 1, auxiliary, source, destination);

}

int main() {
int choice;

do {
printf("\n--- Recursive Function Menu ---\n");
printf("1. Sum of first n natural numbers\n");
printf("2. Generate Fibonacci sequence\n");
printf("3. Solve Towers of Hanoi problem\n");
printf("4. Exit\n");
printf("Enter your choice (1-4): ");
scanf("%d", &choice);

switch (choice) {
case 1: {
int n;
printf("Enter the value of n: ");
scanf("%d", &n);
int result = sumOfN(n);
printf("Sum of first %d natural numbers is: %d\n", n,
result);
break;

}
case 2: {
int n, i;
printf("Enter the number of terms in Fibonacci sequence:
");
scanf("%d", &n);
printf("Fibonacci sequence: ");
for (i = 0; i < n; i++) {
printf("%d ", fibonacci(i));
}
printf("\n");
break;
}
case 3: {
int n;
printf("Enter the number of disks: ");
scanf("%d", &n);
printf("Steps to solve Tower of Hanoi with %d disks:\n", n);
towerOfHanoi(n, 'A', 'B', 'C');
break;
}
case 4:
printf("Exiting program.\n");

break;
default:
printf("Invalid choice. Please enter a number between 1
and 4.\n");
}

} while (choice != 4);

return 0;
}