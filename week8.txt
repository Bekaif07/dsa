#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define SIZE 100
char stack[SIZE];
int top = -1;
void push(char ch) {
if (top == SIZE - 1)
printf("Stack Overflow\n");
else
stack[++top] = ch;
}
char pop() {
if (top == -1)
return '\0';
else
return stack[top--];
}
int precedence(char op) {
switch (op) {
case '^': return 3;
case '*': case '/': case '%': return 2;
case '+': case '-': return 1;
default: return 0;
}
}
int isOperator(char ch) {
return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '%' || ch == '^');
}
int isRightAssoc(char op) {

return (op == '^');
}
char peek() {
if (top == -1)
return '\0';
else
return stack[top];
}
void infixToPostfix(char infix[], char postfix[]) {
int i, j = 0;
char ch;
for (i = 0; i < strlen(infix); i++) {
ch = infix[i];
if (isalnum(ch))
postfix[ j++] = ch;
else if (ch == '(')
push(ch);
else if (ch == ')') {
while (top != -1 && peek() != '(')
postfix[ j++] = pop();
pop();
} else if (isOperator(ch)) {
while (top != -1 && isOperator(peek())) {
char topOp = peek();
if ((precedence(topOp) > precedence(ch)) ||
(precedence(topOp) == precedence(ch) && !isRightAssoc(ch))) {
postfix[ j++] = pop();
} else {
break;
}
}
push(ch);
}
}
while (top != -1)
postfix[ j++] = pop();
postfix[ j] = '\0';
}

int main() {
char infix[SIZE], postfix[SIZE];
printf("Enter an infix expression: ");
gets(infix);
infixToPostfix(infix, postfix);
printf("Postfix expression: %s\n", postfix);
return 0;
}